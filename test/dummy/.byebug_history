exit
c
grape_routes_formated
c
grape_routes_formated
c
gr.namespace
gr.version
gr.versions
gr
gr.params
gr.name
gr
gr.options[:method]
gr.options.method
gr.options
gr.method
gr.pattern.path
gr.pattern
gr.params
gr = grape_route.routes.first
grape_route.routes.first
grape_route.routes.size
grape_route.routes
grape.routes
grape_route = grape_routes.first
grape_routes.first
grape_routes = routes_in_group.collect { |r| r.app.app }
grape_routes.first.routes.last.pattern.path
grape_routes.first.routes.last.pattern
grape_routes.first.routes.last.partten
grape_routes.first.routes.last
grape_routes.first.routes.first
grape_routes.first.routes
grape_routes.first.routes.first
grape_routes.first.routes.first.instance_variable_get(:@options)
grape_routes.first.routes.first
grape_routes.first.routes.instance_variable_get :@options
grape_routes.first.routes
grape_routes.first
grape_routes.first.instance_variable_get :@options
grape_routes.first.routes.instance_variable_get :@options
grape_routes.first.instance_variable_get :@options
grape_routes.first.routes
grape_routes
grape_routes = routes_in_group.collect { |r| r.app.app }
    routes_in_group = route_wrappers.select {|r| (r.app.app.superclass rescue nil).to_s == 'Grape::API' }
    routes_in_group = route_wrappers.select {|r| (r.app.app.superclass rescue nil).class_name == 'Grape::API' }
    routes_in_group = route_wrappers.select {|r| (r.app.app.superclass rescue nil).to_s == 'Grape::API' }
    routes_in_group = route_wrappers.select {|r| (r.app.app.superclass rescue nil).name == 'Grape::API' }
routes_in_group = route_wrappers.select {|r| (r.app.app.superclass rescue nil) == 'Grape::API' }
grape_routes = routes_in_group.collect { |r| r.app.app }
route_wrappers.select {|r| (r.app.app.superclass rescue nil).to_s == 'Grape::API' }
route_wrappers.select {|r| (r.app.app.superclass rescue nil) == 'Grape::API' }
route_wrappers.collect {|r| r.app.app.superclass rescue nil }.compact.select { |klass| klass.name == 'Grape::API' }
route_wrappers.collect{|r| r.app.app.superclass rescue nil } 
route_wrappers.collect{|r| r.app.app.superclass rescue }
route_wrappers.collect{|r| r.app.app.superclass }
route_wrappers.collect{|r| r.app.app.class }
route_wrappers.collect{|r| r.app.app.superclass }
route_wrappers.collect{|r| r.app.app }
route_wrappers.collect{|r| r.app.app.app}
route_wrappers.collect{|r| r.app.app.class}
route_wrappers.collect{|r| r.app.app}
exit
c
rw.reqs
rw.path
rw.verb
rw.name
rw
rw.app.app
rw.app.app.routes
rw.app.app
rw.app.app.superclass
rw.app.app.super_class
rw.app.app.class
rw.app.app
rw.app
rw.name
rw
rw.rw
rw.app
rw = rws.select {|rw| rw.engine?}.first
rw= _
rws.select {|rw| rw.engine?}.first
rws.select {|rw| rw.engine?}
rws = routes.collect { |r| ActionDispatch::Routing::RouteWrapper.new r }
route.rack_app.routes
rw.rack_app.routes
rw.engine?
rw.engine
rw.path
rw.endpoint
rw = ActionDispatch::Routing::RouteWrapper.new(route)
rw = RouteWrapper.new(route)
route.endpoint
routes
routes.collect {|r| r.class}
routes.collect {|r| r.app.class}
routes.collect {|r| r.app}
routes.first.app
routes.first
routes.collect(:app)
routes = all_rails_routes.routes
route.app
route = all_rails_routes.routes.last
route.app
route
route.path
route
route = all_rails_routes.routes.first
route = _
all_rails_routes.routes.first
all_rails_routes.routes
all_rails_routes.routes.routes
all_rails_routes.routes
all_rails_routes.routes[17]
all_rails_routes.routes.class
all_rails_routes.routes.first
all_rails_routes.routes
all_rails_routes.class
all_rails_routes[18]
all_rails_routes.last
all_rails_routes.first
all_rails_routes.size
Dummy::API.superclass
Dummy::API
RAILS_ROUTE_INSPECTOR.send :collect_routes, routes
all_rails_routes
